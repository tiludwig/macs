
macs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  0080012a  0080012a  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000155e  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b52  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e9  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00002f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077d  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a0  00000000  00000000  00003a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000041f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3b       	cpi	r26, 0xB0	; 176
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	serial_puts("]\n");
}

int main(void)
{
	serial_init(UBRR);
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 b2 00 	call	0x164	; 0x164 <serial_init>
	serial_putc(0x11);
  ae:	81 e1       	ldi	r24, 0x11	; 17
  b0:	0e 94 cd 00 	call	0x19a	; 0x19a <serial_putc>
	serial_puts("MACS FW V1.0 OCT 2018\n\n");
  b4:	81 e1       	ldi	r24, 0x11	; 17
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <serial_puts>
		
	yTorquerInitialize();
  bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <yTorquerInitialize>
	xTorquerInitialize();
  c0:	0e 94 ed 00 	call	0x1da	; 0x1da <xTorquerInitialize>
	zTorquerInitialize();
  c4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <zTorquerInitialize>
	
	torquerEnable();
  c8:	0e 94 06 01 	call	0x20c	; 0x20c <torquerEnable>
	
	uint8_t index = 0;
	char buffer[32];
    while (1) 
    {				
		if(serial_available())
  cc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <serial_available>
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0x26>

000000d2 <rb_init>:
 *	Checks if the ringbuffer is full
 */
inline uint8_t rb_isFull(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == RINGBUFFER_SIZE) ? 1 : 0;
}
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	12 82       	std	Z+2, r1	; 0x02
  da:	08 95       	ret

000000dc <rb_isEmpty>:
/*
 *	Checks if the ringbuffer is empty
 */	
inline uint8_t rb_isEmpty(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == 0) ? 1 : 0;
  dc:	fc 01       	movw	r30, r24
  de:	21 81       	ldd	r18, Z+1	; 0x01
  e0:	90 81       	ld	r25, Z
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	29 13       	cpse	r18, r25
  e6:	80 e0       	ldi	r24, 0x00	; 0
}
  e8:	08 95       	ret

000000ea <rb_write>:


/*
 *	Writes a byte into the ringbuffer. If the ringbuffer is full the data is not written.
 */
inline void rb_write(volatile struct ringbuffer_t *rb, uint8_t data) {
  ea:	fc 01       	movw	r30, r24
/*
 *	Checks if the ringbuffer is full
 */
inline uint8_t rb_isFull(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == RINGBUFFER_SIZE) ? 1 : 0;
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	20 81       	ld	r18, Z
/*
 *	Writes a byte into the ringbuffer. If the ringbuffer is full the data is not written.
 */
inline void rb_write(volatile struct ringbuffer_t *rb, uint8_t data) {
	/* check if full */
	if(rb_isFull(rb) == 1) {
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 1b       	sub	r24, r18
  f4:	91 09       	sbc	r25, r1
  f6:	80 34       	cpi	r24, 0x40	; 64
  f8:	91 05       	cpc	r25, r1
  fa:	19 f4       	brne	.+6      	; 0x102 <rb_write+0x18>
		rb->overflow = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	82 83       	std	Z+2, r24	; 0x02
		return;
 100:	08 95       	ret
	}
	/* resolve index */
	uint8_t tail = rb->tail++;
 102:	81 81       	ldd	r24, Z+1	; 0x01
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	98 0f       	add	r25, r24
 108:	91 83       	std	Z+1, r25	; 0x01
	uint8_t insert_index = tail & RINGBUFFER_SIZE_MSK;
	
	/* insert data */
	rb->buffer[insert_index] = data;
 10a:	8f 73       	andi	r24, 0x3F	; 63
 10c:	e8 0f       	add	r30, r24
 10e:	f1 1d       	adc	r31, r1
 110:	63 83       	std	Z+3, r22	; 0x03
 112:	08 95       	ret

00000114 <__vector_18>:

volatile struct ringbuffer_t rb_recv;
volatile struct ringbuffer_t rb_transmit;

ISR(USART_RX_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	uint8_t data = UDR0;
 136:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/* write data into buffer */
	rb_write(&rb_recv, data);
 13a:	8a e2       	ldi	r24, 0x2A	; 42
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 75 00 	call	0xea	; 0xea <rb_write>
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <serial_init>:



void serial_init(uint16_t ubrr)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	c8 2f       	mov	r28, r24
 16a:	d9 2f       	mov	r29, r25
	rb_init(&rb_recv);
 16c:	8a e2       	ldi	r24, 0x2A	; 42
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 69 00 	call	0xd2	; 0xd2 <rb_init>
	rb_init(&rb_transmit);
 174:	8d e6       	ldi	r24, 0x6D	; 109
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 69 00 	call	0xd2	; 0xd2 <rb_init>
	
	cli();
 17c:	f8 94       	cli
	UBRR0H = ubrr >> 8;
 17e:	d0 93 c5 00 	sts	0x00C5, r29	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubrr;
 182:	c0 93 c4 00 	sts	0x00C4, r28	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 186:	88 e9       	ldi	r24, 0x98	; 152
 188:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format 8 data, 1 stop*/
	UCSR0C = (3 << UCSZ00);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	sei();
 192:	78 94       	sei
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <serial_putc>:

void serial_putc(char character)
{
	/* Wait for empty transmit buffer */
	while( !(UCSR0A & (1 << UDRE0)));
 19a:	e0 ec       	ldi	r30, 0xC0	; 192
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	90 81       	ld	r25, Z
 1a0:	95 ff       	sbrs	r25, 5
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <serial_putc+0x4>
	/* Transmit character */
	UDR0 = character;
 1a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1a8:	08 95       	ret

000001aa <serial_puts>:
}

void serial_puts(const char *string)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	while( *string != '\0')
 1b0:	88 81       	ld	r24, Y
 1b2:	88 23       	and	r24, r24
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <serial_puts+0x18>
 1b6:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_putc(*string);
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <serial_putc>
	UDR0 = character;
}

void serial_puts(const char *string)
{
	while( *string != '\0')
 1bc:	89 91       	ld	r24, Y+
 1be:	81 11       	cpse	r24, r1
 1c0:	fb cf       	rjmp	.-10     	; 0x1b8 <serial_puts+0xe>
	{
		serial_putc(*string);
		string++;
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <serial_available>:

uint8_t serial_available()
{
	return (rb_isEmpty(&rb_recv) == 0);	
 1c8:	8a e2       	ldi	r24, 0x2A	; 42
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 6e 00 	call	0xdc	; 0xdc <rb_isEmpty>
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	81 11       	cpse	r24, r1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
}
 1d6:	89 2f       	mov	r24, r25
 1d8:	08 95       	ret

000001da <xTorquerInitialize>:
void torquerDisableAll()
{
	xTorquerDisable();
	yTorquerDisable();
	zTorquerDisable();
	TORQUER_ENABLE_SLEEP();
 1da:	38 9a       	sbi	0x07, 0	; 7
 1dc:	40 98       	cbi	0x08, 0	; 8
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	86 60       	ori	r24, 0x06	; 6
 1e2:	84 b9       	out	0x04, r24	; 4
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	89 7f       	andi	r24, 0xF9	; 249
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	08 95       	ret

000001ec <yTorquerInitialize>:
 1ec:	38 9a       	sbi	0x07, 0	; 7
 1ee:	40 98       	cbi	0x08, 0	; 8
 1f0:	23 9a       	sbi	0x04, 3	; 4
 1f2:	53 9a       	sbi	0x0a, 3	; 10
 1f4:	2b 98       	cbi	0x05, 3	; 5
 1f6:	5b 98       	cbi	0x0b, 3	; 11
 1f8:	08 95       	ret

000001fa <zTorquerInitialize>:
 1fa:	38 9a       	sbi	0x07, 0	; 7
 1fc:	40 98       	cbi	0x08, 0	; 8
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	80 66       	ori	r24, 0x60	; 96
 202:	8a b9       	out	0x0a, r24	; 10
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 79       	andi	r24, 0x9F	; 159
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	08 95       	ret

0000020c <torquerEnable>:
}

void torquerEnable()
{
	TORQUER_DISABLE_SLEEP();
 20c:	40 9a       	sbi	0x08, 0	; 8
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
