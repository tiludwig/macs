
macs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000005c2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800134  00800134  0000068a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000700  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169c  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c16  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b55  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000689  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ed  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 df 02 	jmp	0x5be	; 0x5be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fastmap>:

 .global fastmap

 fastmap:
	; save input in other register for later use
	mov r25, r24
  a6:	98 2f       	mov	r25, r24
	; load multiplier and multiply input
	ldi r18, 5
  a8:	25 e0       	ldi	r18, 0x05	; 5
	mul r25, r18
  aa:	92 9f       	mul	r25, r18
	; result is in r0:r1 (low:high)
	; divide by 4
	asr r1
  ac:	15 94       	asr	r1
	ror r0
  ae:	07 94       	ror	r0
	asr r1
  b0:	15 94       	asr	r1
	ror r0
  b2:	07 94       	ror	r0
	; save lower byte (after division by 4 result is guaranted to be < 255)
	mov r24, r0
  b4:	80 2d       	mov	r24, r0
	; now add correction factor
	; load multiplier and multiply to get corrective factor
	ldi r18, 14
  b6:	2e e0       	ldi	r18, 0x0E	; 14
	mul r25, r18
  b8:	92 9f       	mul	r25, r18
	asr r1
  ba:	15 94       	asr	r1
	; divide by 256 (discard lower byte)
	; add correction (with carry to round)
	adc r24, r1
  bc:	81 1d       	adc	r24, r1
	; r1 = 0 for gcc
	clr r1
  be:	11 24       	eor	r1, r1
  c0:	08 95       	ret

000000c2 <executeCommand>:
	serial_puts(buffer);
	serial_putc(' ');
	itoa(cmd->z, buffer, 10);
	serial_puts(buffer);
	serial_puts("]\r");
}
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	02 81       	ldd	r16, Z+2	; 0x02
  d2:	13 81       	ldd	r17, Z+3	; 0x03
  d4:	c4 81       	ldd	r28, Z+4	; 0x04
  d6:	d5 81       	ldd	r29, Z+5	; 0x05
  d8:	99 23       	and	r25, r25
  da:	44 f4       	brge	.+16     	; 0xec <executeCommand+0x2a>
  dc:	81 95       	neg	r24
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <fastmap>
  e2:	0e 94 8d 02 	call	0x51a	; 0x51a <xTorquerSetDutyCycle>
  e6:	0e 94 57 02 	call	0x4ae	; 0x4ae <xTorquerEnableChannelA>
  ea:	0b c0       	rjmp	.+22     	; 0x102 <executeCommand+0x40>
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	19 f4       	brne	.+6      	; 0xf6 <executeCommand+0x34>
  f0:	0e 94 40 02 	call	0x480	; 0x480 <xTorquerDisable>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <executeCommand+0x40>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <fastmap>
  fa:	0e 94 8d 02 	call	0x51a	; 0x51a <xTorquerSetDutyCycle>
  fe:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTorquerEnableChannelB>
 102:	11 23       	and	r17, r17
 104:	4c f4       	brge	.+18     	; 0x118 <executeCommand+0x56>
 106:	80 2f       	mov	r24, r16
 108:	81 95       	neg	r24
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <fastmap>
 10e:	0e 94 9b 02 	call	0x536	; 0x536 <yTorquerSetDutyCycle>
 112:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <yTorquerEnableChannelA>
 116:	0d c0       	rjmp	.+26     	; 0x132 <executeCommand+0x70>
 118:	01 15       	cp	r16, r1
 11a:	11 05       	cpc	r17, r1
 11c:	19 f4       	brne	.+6      	; 0x124 <executeCommand+0x62>
 11e:	0e 94 48 02 	call	0x490	; 0x490 <yTorquerDisable>
 122:	07 c0       	rjmp	.+14     	; 0x132 <executeCommand+0x70>
 124:	80 2f       	mov	r24, r16
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <fastmap>
 12a:	0e 94 9b 02 	call	0x536	; 0x536 <yTorquerSetDutyCycle>
 12e:	0e 94 75 02 	call	0x4ea	; 0x4ea <yTorquerEnableChannelB>
 132:	dd 23       	and	r29, r29
 134:	4c f4       	brge	.+18     	; 0x148 <executeCommand+0x86>
 136:	8c 2f       	mov	r24, r28
 138:	81 95       	neg	r24
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <fastmap>
 13e:	0e 94 a4 02 	call	0x548	; 0x548 <zTorquerSetDutyCycle>
 142:	0e 94 7f 02 	call	0x4fe	; 0x4fe <zTorquerEnableChannelA>
 146:	0c c0       	rjmp	.+24     	; 0x160 <executeCommand+0x9e>
 148:	20 97       	sbiw	r28, 0x00	; 0
 14a:	19 f4       	brne	.+6      	; 0x152 <executeCommand+0x90>
 14c:	0e 94 4f 02 	call	0x49e	; 0x49e <zTorquerDisable>
 150:	07 c0       	rjmp	.+14     	; 0x160 <executeCommand+0x9e>
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <fastmap>
 158:	0e 94 a4 02 	call	0x548	; 0x548 <zTorquerSetDutyCycle>
 15c:	0e 94 86 02 	call	0x50c	; 0x50c <zTorquerEnableChannelB>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <main>:

int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	a6 97       	sbiw	r28, 0x26	; 38
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
	serial_init(UBRR);
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 e7 01 	call	0x3ce	; 0x3ce <serial_init>
	serial_puts("MACS FW V1.0 OCT 2018\r");
 186:	81 e1       	ldi	r24, 0x11	; 17
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 0a 02 	call	0x414	; 0x414 <serial_puts>
		
	yTorquerInitialize();
 18e:	0e 94 30 02 	call	0x460	; 0x460 <yTorquerInitialize>
	xTorquerInitialize();
 192:	0e 94 27 02 	call	0x44e	; 0x44e <xTorquerInitialize>
	zTorquerInitialize();
 196:	0e 94 37 02 	call	0x46e	; 0x46e <zTorquerInitialize>
	
	torquerEnable();
 19a:	0e 94 55 02 	call	0x4aa	; 0x4aa <torquerEnable>
	
	uint8_t index = 0;
 19e:	10 e0       	ldi	r17, 0x00	; 0
				}
				else
				{
					serial_puts("?\r");
				}
				index = 0;
 1a0:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t index = 0;
	char buffer[32];
	struct setpoint_t setp;
    while (1) 
    {				
		if(serial_available())
 1a2:	0e 94 19 02 	call	0x432	; 0x432 <serial_available>
 1a6:	88 23       	and	r24, r24
 1a8:	e1 f3       	breq	.-8      	; 0x1a2 <main+0x38>
		{
			char data = serial_getchar();
 1aa:	0e 94 22 02 	call	0x444	; 0x444 <serial_getchar>
			if(data != '\r' && data != '\n')
 1ae:	8d 30       	cpi	r24, 0x0D	; 13
 1b0:	59 f0       	breq	.+22     	; 0x1c8 <main+0x5e>
 1b2:	8a 30       	cpi	r24, 0x0A	; 10
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <main+0x5e>
			{
				buffer[index++] = data;
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	e1 0f       	add	r30, r17
 1c0:	f1 1d       	adc	r31, r1
 1c2:	80 83       	st	Z, r24
 1c4:	1f 5f       	subi	r17, 0xFF	; 255
 1c6:	ed cf       	rjmp	.-38     	; 0x1a2 <main+0x38>
			}
			else
			{
				buffer[index] = '\0';
 1c8:	e1 e0       	ldi	r30, 0x01	; 1
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	e1 0f       	add	r30, r17
 1d2:	f1 1d       	adc	r31, r1
 1d4:	10 82       	st	Z, r1
				if(parseString(buffer, &setp) == PARSER_OK)
 1d6:	be 01       	movw	r22, r28
 1d8:	6f 5d       	subi	r22, 0xDF	; 223
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	0e 94 04 01 	call	0x208	; 0x208 <parseString>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	51 f4       	brne	.+20     	; 0x1fc <main+0x92>
				{
					executeCommand(&setp);
 1e8:	ce 01       	movw	r24, r28
 1ea:	81 96       	adiw	r24, 0x21	; 33
 1ec:	0e 94 61 00 	call	0xc2	; 0xc2 <executeCommand>
					serial_puts("OK\r");
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 0a 02 	call	0x414	; 0x414 <serial_puts>
				}
				else
				{
					serial_puts("?\r");
				}
				index = 0;
 1f8:	10 2f       	mov	r17, r16
 1fa:	d3 cf       	rjmp	.-90     	; 0x1a2 <main+0x38>
					executeCommand(&setp);
					serial_puts("OK\r");
				}
				else
				{
					serial_puts("?\r");
 1fc:	8c e2       	ldi	r24, 0x2C	; 44
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 0a 02 	call	0x414	; 0x414 <serial_puts>
				}
				index = 0;
 204:	10 2f       	mov	r17, r16
 206:	cd cf       	rjmp	.-102    	; 0x1a2 <main+0x38>

00000208 <parseString>:

	return (isNegative == 1) ? -1*tmpNum : tmpNum;
}

uint8_t parseString(char* buffer, struct setpoint_t *setp)
{
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <parseString+0x16>
 21e:	00 d0       	rcall	.+0      	; 0x220 <parseString+0x18>
 220:	00 d0       	rcall	.+0      	; 0x222 <parseString+0x1a>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	7b 01       	movw	r14, r22
	char* token = strtok(buffer, " ");
 228:	6f e2       	ldi	r22, 0x2F	; 47
 22a:	71 e0       	ldi	r23, 0x01	; 1
 22c:	0e 94 aa 02 	call	0x554	; 0x554 <strtok>
	if (strcmp(token, "D") != 0)
 230:	61 e3       	ldi	r22, 0x31	; 49
 232:	71 e0       	ldi	r23, 0x01	; 1
 234:	0e 94 af 02 	call	0x55e	; 0x55e <strcmp>
 238:	89 2b       	or	r24, r25
 23a:	09 f0       	breq	.+2      	; 0x23e <parseString+0x36>
 23c:	55 c0       	rjmp	.+170    	; 0x2e8 <parseString+0xe0>
 23e:	8e 01       	movw	r16, r28
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
 244:	6e 01       	movw	r12, r28
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	c8 0e       	add	r12, r24
 24a:	d1 1c       	adc	r13, r1

static short str2short(const char *buffer)
{
	short tmpNum = 0;

	uint8_t isNegative = 0;
 24c:	b1 2c       	mov	r11, r1
	if (*buffer == '-')
	{
		isNegative = 1;
 24e:	aa 24       	eor	r10, r10
 250:	a3 94       	inc	r10
	short dm[3];

	for (int i = 0; i < 3; i++)
	{
		// get next token
		token = strtok(0, " ");
 252:	6f e2       	ldi	r22, 0x2F	; 47
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 aa 02 	call	0x554	; 0x554 <strtok>
 25e:	fc 01       	movw	r30, r24
		if (token == 0)
 260:	89 2b       	or	r24, r25
 262:	09 f4       	brne	.+2      	; 0x266 <parseString+0x5e>
 264:	43 c0       	rjmp	.+134    	; 0x2ec <parseString+0xe4>
static short str2short(const char *buffer)
{
	short tmpNum = 0;

	uint8_t isNegative = 0;
	if (*buffer == '-')
 266:	90 81       	ld	r25, Z
 268:	9d 32       	cpi	r25, 0x2D	; 45
 26a:	09 f0       	breq	.+2      	; 0x26e <parseString+0x66>
 26c:	41 c0       	rjmp	.+130    	; 0x2f0 <parseString+0xe8>
	{
		isNegative = 1;
		buffer++;
 26e:	9f 01       	movw	r18, r30
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	while (*buffer != '\0')
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	99 23       	and	r25, r25
 278:	e1 f0       	breq	.+56     	; 0x2b2 <parseString+0xaa>

	uint8_t isNegative = 0;
	if (*buffer == '-')
	{
		isNegative = 1;
		buffer++;
 27a:	f9 01       	movw	r30, r18
	short tmpNum = 0;

	uint8_t isNegative = 0;
	if (*buffer == '-')
	{
		isNegative = 1;
 27c:	8a 2d       	mov	r24, r10
 27e:	01 c0       	rjmp	.+2      	; 0x282 <parseString+0x7a>

static short str2short(const char *buffer)
{
	short tmpNum = 0;

	uint8_t isNegative = 0;
 280:	8b 2d       	mov	r24, r11
 282:	31 96       	adiw	r30, 0x01	; 1
	if (*buffer == '-')
	{
		isNegative = 1;
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
		buffer++;
	}

	while (*buffer != '\0')
	{
		tmpNum = tmpNum * 10 + *buffer++ - '0';
 288:	a9 01       	movw	r20, r18
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	24 0f       	add	r18, r20
 29c:	35 1f       	adc	r19, r21
 29e:	29 0f       	add	r18, r25
 2a0:	31 1d       	adc	r19, r1
 2a2:	20 53       	subi	r18, 0x30	; 48
 2a4:	31 09       	sbc	r19, r1
	{
		isNegative = 1;
		buffer++;
	}

	while (*buffer != '\0')
 2a6:	91 91       	ld	r25, Z+
 2a8:	91 11       	cpse	r25, r1
 2aa:	ee cf       	rjmp	.-36     	; 0x288 <parseString+0x80>
	{
		tmpNum = tmpNum * 10 + *buffer++ - '0';
	}

	return (isNegative == 1) ? -1*tmpNum : tmpNum;
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	31 f4       	brne	.+12     	; 0x2bc <parseString+0xb4>
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <parseString+0xae>
	{
		isNegative = 1;
		buffer++;
	}

	while (*buffer != '\0')
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
	{
		tmpNum = tmpNum * 10 + *buffer++ - '0';
	}

	return (isNegative == 1) ? -1*tmpNum : tmpNum;
 2b6:	31 95       	neg	r19
 2b8:	21 95       	neg	r18
 2ba:	31 09       	sbc	r19, r1
		token = strtok(0, " ");
		if (token == 0)
		{
			return PARSER_FAIL;
		}
		dm[i] = str2short(token);
 2bc:	f8 01       	movw	r30, r16
 2be:	21 93       	st	Z+, r18
 2c0:	31 93       	st	Z+, r19
 2c2:	8f 01       	movw	r16, r30
		return PARSER_FAIL;
	}

	short dm[3];

	for (int i = 0; i < 3; i++)
 2c4:	ec 15       	cp	r30, r12
 2c6:	fd 05       	cpc	r31, r13
 2c8:	21 f6       	brne	.-120    	; 0x252 <parseString+0x4a>
			return PARSER_FAIL;
		}
		dm[i] = str2short(token);
	}
	
	setp->x = dm[0];
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	f7 01       	movw	r30, r14
 2d0:	91 83       	std	Z+1, r25	; 0x01
 2d2:	80 83       	st	Z, r24
	setp->y = dm[1];
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	9c 81       	ldd	r25, Y+4	; 0x04
 2d8:	93 83       	std	Z+3, r25	; 0x03
 2da:	82 83       	std	Z+2, r24	; 0x02
	setp->z = dm[2];
 2dc:	8d 81       	ldd	r24, Y+5	; 0x05
 2de:	9e 81       	ldd	r25, Y+6	; 0x06
 2e0:	95 83       	std	Z+5, r25	; 0x05
 2e2:	84 83       	std	Z+4, r24	; 0x04
	return PARSER_OK;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <parseString+0xf2>
uint8_t parseString(char* buffer, struct setpoint_t *setp)
{
	char* token = strtok(buffer, " ");
	if (strcmp(token, "D") != 0)
	{
		return PARSER_FAIL;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	07 c0       	rjmp	.+14     	; 0x2fa <parseString+0xf2>
	{
		// get next token
		token = strtok(0, " ");
		if (token == 0)
		{
			return PARSER_FAIL;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <parseString+0xf2>
	{
		isNegative = 1;
		buffer++;
	}

	while (*buffer != '\0')
 2f0:	91 11       	cpse	r25, r1
 2f2:	c6 cf       	rjmp	.-116    	; 0x280 <parseString+0x78>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <parseString+0xb4>
	
	setp->x = dm[0];
	setp->y = dm[1];
	setp->z = dm[2];
	return PARSER_OK;
}
 2fa:	26 96       	adiw	r28, 0x06	; 6
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	bf 90       	pop	r11
 318:	af 90       	pop	r10
 31a:	08 95       	ret

0000031c <rb_init>:
 *	Checks if the ringbuffer is full
 */
inline uint8_t rb_isFull(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == RINGBUFFER_SIZE) ? 1 : 0;
}
 31c:	fc 01       	movw	r30, r24
 31e:	10 82       	st	Z, r1
 320:	11 82       	std	Z+1, r1	; 0x01
 322:	12 82       	std	Z+2, r1	; 0x02
 324:	08 95       	ret

00000326 <rb_isEmpty>:
/*
 *	Checks if the ringbuffer is empty
 */	
inline uint8_t rb_isEmpty(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == 0) ? 1 : 0;
 326:	fc 01       	movw	r30, r24
 328:	21 81       	ldd	r18, Z+1	; 0x01
 32a:	90 81       	ld	r25, Z
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	29 13       	cpse	r18, r25
 330:	80 e0       	ldi	r24, 0x00	; 0
}
 332:	08 95       	ret

00000334 <rb_write>:


/*
 *	Writes a byte into the ringbuffer. If the ringbuffer is full the data is not written.
 */
inline void rb_write(volatile struct ringbuffer_t *rb, uint8_t data) {
 334:	fc 01       	movw	r30, r24
/*
 *	Checks if the ringbuffer is full
 */
inline uint8_t rb_isFull(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == RINGBUFFER_SIZE) ? 1 : 0;
 336:	81 81       	ldd	r24, Z+1	; 0x01
 338:	20 81       	ld	r18, Z
/*
 *	Writes a byte into the ringbuffer. If the ringbuffer is full the data is not written.
 */
inline void rb_write(volatile struct ringbuffer_t *rb, uint8_t data) {
	/* check if full */
	if(rb_isFull(rb) == 1) {
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	82 1b       	sub	r24, r18
 33e:	91 09       	sbc	r25, r1
 340:	80 34       	cpi	r24, 0x40	; 64
 342:	91 05       	cpc	r25, r1
 344:	19 f4       	brne	.+6      	; 0x34c <rb_write+0x18>
		rb->overflow = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	82 83       	std	Z+2, r24	; 0x02
		return;
 34a:	08 95       	ret
	}
	/* resolve index */
	uint8_t tail = rb->tail++;
 34c:	81 81       	ldd	r24, Z+1	; 0x01
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	98 0f       	add	r25, r24
 352:	91 83       	std	Z+1, r25	; 0x01
	uint8_t insert_index = tail & RINGBUFFER_SIZE_MSK;
	
	/* insert data */
	rb->buffer[insert_index] = data;
 354:	8f 73       	andi	r24, 0x3F	; 63
 356:	e8 0f       	add	r30, r24
 358:	f1 1d       	adc	r31, r1
 35a:	63 83       	std	Z+3, r22	; 0x03
 35c:	08 95       	ret

0000035e <rb_read>:

/*
 *	Gets the next byte from the ringbuffer
 */
inline uint8_t rb_read(volatile struct ringbuffer_t *rb)
{
 35e:	fc 01       	movw	r30, r24
/*
 *	Checks if the ringbuffer is empty
 */	
inline uint8_t rb_isEmpty(volatile struct ringbuffer_t *rb)
{
	return ((rb->tail - rb->head) == 0) ? 1 : 0;
 360:	91 81       	ldd	r25, Z+1	; 0x01
 362:	80 81       	ld	r24, Z
 *	Gets the next byte from the ringbuffer
 */
inline uint8_t rb_read(volatile struct ringbuffer_t *rb)
{
	/* check if empty */
	if(rb_isEmpty(rb)) {
 364:	98 17       	cp	r25, r24
 366:	49 f0       	breq	.+18     	; 0x37a <rb_read+0x1c>
		return 0;
	} 
	/* resolve index */
	uint8_t head = rb->head++;
 368:	80 81       	ld	r24, Z
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	98 0f       	add	r25, r24
 36e:	90 83       	st	Z, r25
	uint8_t read_index = head & RINGBUFFER_SIZE_MSK;
		
	/* read data */
	return rb->buffer[read_index];
 370:	8f 73       	andi	r24, 0x3F	; 63
 372:	e8 0f       	add	r30, r24
 374:	f1 1d       	adc	r31, r1
 376:	83 81       	ldd	r24, Z+3	; 0x03
 378:	08 95       	ret
 */
inline uint8_t rb_read(volatile struct ringbuffer_t *rb)
{
	/* check if empty */
	if(rb_isEmpty(rb)) {
		return 0;
 37a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t head = rb->head++;
	uint8_t read_index = head & RINGBUFFER_SIZE_MSK;
		
	/* read data */
	return rb->buffer[read_index];
 37c:	08 95       	ret

0000037e <__vector_18>:

volatile struct ringbuffer_t rb_recv;
volatile struct ringbuffer_t rb_transmit;

ISR(USART_RX_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	uint8_t data = UDR0;
 3a0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/* write data into buffer */
	rb_write(&rb_recv, data);
 3a4:	86 e3       	ldi	r24, 0x36	; 54
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 9a 01 	call	0x334	; 0x334 <rb_write>
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <serial_init>:



void serial_init(uint16_t ubrr)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	c8 2f       	mov	r28, r24
 3d4:	d9 2f       	mov	r29, r25
	rb_init(&rb_recv);
 3d6:	86 e3       	ldi	r24, 0x36	; 54
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 8e 01 	call	0x31c	; 0x31c <rb_init>
	rb_init(&rb_transmit);
 3de:	89 e7       	ldi	r24, 0x79	; 121
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 8e 01 	call	0x31c	; 0x31c <rb_init>
	
	cli();
 3e6:	f8 94       	cli
	UBRR0H = ubrr >> 8;
 3e8:	d0 93 c5 00 	sts	0x00C5, r29	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubrr;
 3ec:	c0 93 c4 00 	sts	0x00C4, r28	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 3f0:	88 e9       	ldi	r24, 0x98	; 152
 3f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format 8 data, 1 stop*/
	UCSR0C = (3 << UCSZ00);
 3f6:	86 e0       	ldi	r24, 0x06	; 6
 3f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	sei();
 3fc:	78 94       	sei
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <serial_putc>:

void serial_putc(char character)
{
	/* Wait for empty transmit buffer */
	while( !(UCSR0A & (1 << UDRE0)));
 404:	e0 ec       	ldi	r30, 0xC0	; 192
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	90 81       	ld	r25, Z
 40a:	95 ff       	sbrs	r25, 5
 40c:	fd cf       	rjmp	.-6      	; 0x408 <serial_putc+0x4>
	/* Transmit character */
	UDR0 = character;
 40e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 412:	08 95       	ret

00000414 <serial_puts>:
}

void serial_puts(const char *string)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	ec 01       	movw	r28, r24
	while( *string != '\0')
 41a:	88 81       	ld	r24, Y
 41c:	88 23       	and	r24, r24
 41e:	31 f0       	breq	.+12     	; 0x42c <serial_puts+0x18>
 420:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_putc(*string);
 422:	0e 94 02 02 	call	0x404	; 0x404 <serial_putc>
	UDR0 = character;
}

void serial_puts(const char *string)
{
	while( *string != '\0')
 426:	89 91       	ld	r24, Y+
 428:	81 11       	cpse	r24, r1
 42a:	fb cf       	rjmp	.-10     	; 0x422 <serial_puts+0xe>
	{
		serial_putc(*string);
		string++;
	}
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <serial_available>:

uint8_t serial_available()
{
	return (rb_isEmpty(&rb_recv) == 0);	
 432:	86 e3       	ldi	r24, 0x36	; 54
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 93 01 	call	0x326	; 0x326 <rb_isEmpty>
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	81 11       	cpse	r24, r1
 43e:	90 e0       	ldi	r25, 0x00	; 0
}
 440:	89 2f       	mov	r24, r25
 442:	08 95       	ret

00000444 <serial_getchar>:

uint8_t serial_getchar()
{
	return rb_read(&rb_recv);
 444:	86 e3       	ldi	r24, 0x36	; 54
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 af 01 	call	0x35e	; 0x35e <rb_read>
 44c:	08 95       	ret

0000044e <xTorquerInitialize>:
void torquerDisableAll()
{
	xTorquerDisable();
	yTorquerDisable();
	zTorquerDisable();
	TORQUER_ENABLE_SLEEP();
 44e:	38 9a       	sbi	0x07, 0	; 7
 450:	40 98       	cbi	0x08, 0	; 8
 452:	84 b1       	in	r24, 0x04	; 4
 454:	86 60       	ori	r24, 0x06	; 6
 456:	84 b9       	out	0x04, r24	; 4
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	89 7f       	andi	r24, 0xF9	; 249
 45c:	85 b9       	out	0x05, r24	; 5
 45e:	08 95       	ret

00000460 <yTorquerInitialize>:
 460:	38 9a       	sbi	0x07, 0	; 7
 462:	40 98       	cbi	0x08, 0	; 8
 464:	23 9a       	sbi	0x04, 3	; 4
 466:	53 9a       	sbi	0x0a, 3	; 10
 468:	2b 98       	cbi	0x05, 3	; 5
 46a:	5b 98       	cbi	0x0b, 3	; 11
 46c:	08 95       	ret

0000046e <zTorquerInitialize>:
 46e:	38 9a       	sbi	0x07, 0	; 7
 470:	40 98       	cbi	0x08, 0	; 8
 472:	8a b1       	in	r24, 0x0a	; 10
 474:	80 66       	ori	r24, 0x60	; 96
 476:	8a b9       	out	0x0a, r24	; 10
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	8f 79       	andi	r24, 0x9F	; 159
 47c:	8b b9       	out	0x0b, r24	; 11
 47e:	08 95       	ret

00000480 <xTorquerDisable>:
 480:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 484:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 488:	85 b1       	in	r24, 0x05	; 5
 48a:	89 7f       	andi	r24, 0xF9	; 249
 48c:	85 b9       	out	0x05, r24	; 5
 48e:	08 95       	ret

00000490 <yTorquerDisable>:
 490:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 494:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 498:	2b 98       	cbi	0x05, 3	; 5
 49a:	5b 98       	cbi	0x0b, 3	; 11
 49c:	08 95       	ret

0000049e <zTorquerDisable>:
 49e:	14 bc       	out	0x24, r1	; 36
 4a0:	15 bc       	out	0x25, r1	; 37
 4a2:	8b b1       	in	r24, 0x0b	; 11
 4a4:	8f 79       	andi	r24, 0x9F	; 159
 4a6:	8b b9       	out	0x0b, r24	; 11
 4a8:	08 95       	ret

000004aa <torquerEnable>:
}

void torquerEnable()
{
	TORQUER_DISABLE_SLEEP();
 4aa:	40 9a       	sbi	0x08, 0	; 8
 4ac:	08 95       	ret

000004ae <xTorquerEnableChannelA>:
}

void xTorquerEnableChannelA()
{
	TCCR1B = TIM1_TCCR1B_DISABLE;
 4ae:	e1 e8       	ldi	r30, 0x81	; 129
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	10 82       	st	Z, r1
	/* switch to channel A*/
	TCCR1A = TIM1_TCCR1A_CHANNEL_A;
 4b4:	81 e8       	ldi	r24, 0x81	; 129
 4b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	/* put inactive channel to low level */
	TIM1_CHANNEL_PORT &= ~TIM1_CHANNEL_B_PIN;
 4ba:	2a 98       	cbi	0x05, 2	; 5
	
	/* re-enable timer */
	TCCR1B = TIM1_TCCR1B_ENABLE;
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	80 83       	st	Z, r24
 4c0:	08 95       	ret

000004c2 <xTorquerEnableChannelB>:
}

void xTorquerEnableChannelB()
{
	TCCR1B = TIM1_TCCR1B_DISABLE;
 4c2:	e1 e8       	ldi	r30, 0x81	; 129
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	10 82       	st	Z, r1
	/* switch to channel A*/
	TCCR1A = TIM1_TCCR1A_CHANNEL_B;
 4c8:	81 e2       	ldi	r24, 0x21	; 33
 4ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	/* put inactive channel to low level */
	TIM1_CHANNEL_PORT &= ~TIM1_CHANNEL_A_PIN;
 4ce:	29 98       	cbi	0x05, 1	; 5

	/* re-enable timer */
	TCCR1B = TIM1_TCCR1B_ENABLE;
 4d0:	8a e0       	ldi	r24, 0x0A	; 10
 4d2:	80 83       	st	Z, r24
 4d4:	08 95       	ret

000004d6 <yTorquerEnableChannelA>:
}

void yTorquerEnableChannelA()
{
	TCCR2B = TIM2_TCCR2B_DISABLE;
 4d6:	e1 eb       	ldi	r30, 0xB1	; 177
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	10 82       	st	Z, r1
	/* switch to channel A*/
	TCCR2A = TIM2_TCCR2A_CHANNEL_A;
 4dc:	83 e8       	ldi	r24, 0x83	; 131
 4de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	/* put inactive channel to low level */
	TIM2_CHANNEL_B_PORT &= ~TIM2_CHANNEL_B_PIN;
 4e2:	5b 98       	cbi	0x0b, 3	; 11
	
	/* re-enable timer */
	TCCR2B = TIM2_TCCR2B_ENABLE;
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	80 83       	st	Z, r24
 4e8:	08 95       	ret

000004ea <yTorquerEnableChannelB>:
}

void yTorquerEnableChannelB()
{
	TCCR2B = TIM2_TCCR2B_DISABLE;
 4ea:	e1 eb       	ldi	r30, 0xB1	; 177
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	10 82       	st	Z, r1
	/* switch to channel A*/
	TCCR2A = TIM2_TCCR2A_CHANNEL_B;
 4f0:	83 e2       	ldi	r24, 0x23	; 35
 4f2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

	/* put inactive channel to low level */
	TIM2_CHANNEL_A_PORT &= ~TIM2_CHANNEL_A_PIN;
 4f6:	2b 98       	cbi	0x05, 3	; 5
	/* re-enable timer */
	TCCR2B = TIM2_TCCR2B_ENABLE;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	80 83       	st	Z, r24
 4fc:	08 95       	ret

000004fe <zTorquerEnableChannelA>:
}

void zTorquerEnableChannelA()
{
	TCCR0B = TIM0_TCCR0B_DISABLE;
 4fe:	15 bc       	out	0x25, r1	; 37
	/* switch to channel A*/
	TCCR0A = TIM0_TCCR0A_CHANNEL_A;
 500:	83 e8       	ldi	r24, 0x83	; 131
 502:	84 bd       	out	0x24, r24	; 36

	/* put inactive channel to low level */
	TIM0_CHANNEL_PORT &= ~TIM0_CHANNEL_B_PIN;
 504:	5d 98       	cbi	0x0b, 5	; 11

	/* re-enable timer */
	TCCR0B = TIM0_TCCR0B_ENABLE;
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	85 bd       	out	0x25, r24	; 37
 50a:	08 95       	ret

0000050c <zTorquerEnableChannelB>:
}

void zTorquerEnableChannelB()
{
	TCCR0B = TIM0_TCCR0B_DISABLE;
 50c:	15 bc       	out	0x25, r1	; 37
	/* switch to channel A*/
	TCCR0A = TIM0_TCCR0A_CHANNEL_B;
 50e:	83 e2       	ldi	r24, 0x23	; 35
 510:	84 bd       	out	0x24, r24	; 36

	/* put inactive channel to low level */
	TIM0_CHANNEL_PORT &= ~TIM0_CHANNEL_A_PIN;
 512:	5e 98       	cbi	0x0b, 6	; 11

	/* re-enable timer */
	TCCR0B = TIM0_TCCR0B_ENABLE;
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	85 bd       	out	0x25, r24	; 37
 518:	08 95       	ret

0000051a <xTorquerSetDutyCycle>:
}

void xTorquerSetDutyCycle(uint8_t dutyCycle)
{
	if(dutyCycle == 0)
 51a:	81 11       	cpse	r24, r1
 51c:	02 c0       	rjmp	.+4      	; 0x522 <xTorquerSetDutyCycle+0x8>
		TCCR1B = TIM1_TCCR1B_DISABLE;
 51e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = dutyCycle;
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 528:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = dutyCycle;
 52c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 530:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 534:	08 95       	ret

00000536 <yTorquerSetDutyCycle>:
}

void yTorquerSetDutyCycle(uint8_t dutyCycle)
{
	if(dutyCycle == 0)
 536:	81 11       	cpse	r24, r1
 538:	02 c0       	rjmp	.+4      	; 0x53e <yTorquerSetDutyCycle+0x8>
		TCCR2B = TIM2_TCCR2B_DISABLE;
 53a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = dutyCycle;
 53e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = dutyCycle;
 542:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 546:	08 95       	ret

00000548 <zTorquerSetDutyCycle>:
}

void zTorquerSetDutyCycle(uint8_t dutyCycle)
{
	if(dutyCycle == 0)
 548:	81 11       	cpse	r24, r1
 54a:	01 c0       	rjmp	.+2      	; 0x54e <zTorquerSetDutyCycle+0x6>
	{
		TCCR0B = TIM0_TCCR0B_DISABLE;
 54c:	15 bc       	out	0x25, r1	; 37
	}
	OCR0A = dutyCycle;
 54e:	87 bd       	out	0x27, r24	; 39
	OCR0B = dutyCycle;
 550:	88 bd       	out	0x28, r24	; 40
 552:	08 95       	ret

00000554 <strtok>:
 554:	44 e3       	ldi	r20, 0x34	; 52
 556:	51 e0       	ldi	r21, 0x01	; 1
 558:	0e 94 b8 02 	call	0x570	; 0x570 <strtok_r>
 55c:	08 95       	ret

0000055e <strcmp>:
 55e:	fb 01       	movw	r30, r22
 560:	dc 01       	movw	r26, r24
 562:	8d 91       	ld	r24, X+
 564:	01 90       	ld	r0, Z+
 566:	80 19       	sub	r24, r0
 568:	01 10       	cpse	r0, r1
 56a:	d9 f3       	breq	.-10     	; 0x562 <strcmp+0x4>
 56c:	99 0b       	sbc	r25, r25
 56e:	08 95       	ret

00000570 <strtok_r>:
 570:	fa 01       	movw	r30, r20
 572:	a1 91       	ld	r26, Z+
 574:	b0 81       	ld	r27, Z
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	19 f4       	brne	.+6      	; 0x580 <strtok_r+0x10>
 57a:	10 97       	sbiw	r26, 0x00	; 0
 57c:	e1 f0       	breq	.+56     	; 0x5b6 <strtok_r+0x46>
 57e:	cd 01       	movw	r24, r26
 580:	dc 01       	movw	r26, r24
 582:	cd 01       	movw	r24, r26
 584:	0d 90       	ld	r0, X+
 586:	00 20       	and	r0, r0
 588:	11 f4       	brne	.+4      	; 0x58e <strtok_r+0x1e>
 58a:	c0 01       	movw	r24, r0
 58c:	13 c0       	rjmp	.+38     	; 0x5b4 <strtok_r+0x44>
 58e:	fb 01       	movw	r30, r22
 590:	21 91       	ld	r18, Z+
 592:	22 23       	and	r18, r18
 594:	19 f0       	breq	.+6      	; 0x59c <strtok_r+0x2c>
 596:	20 15       	cp	r18, r0
 598:	d9 f7       	brne	.-10     	; 0x590 <strtok_r+0x20>
 59a:	f3 cf       	rjmp	.-26     	; 0x582 <strtok_r+0x12>
 59c:	fb 01       	movw	r30, r22
 59e:	21 91       	ld	r18, Z+
 5a0:	20 15       	cp	r18, r0
 5a2:	19 f4       	brne	.+6      	; 0x5aa <strtok_r+0x3a>
 5a4:	1e 92       	st	-X, r1
 5a6:	11 96       	adiw	r26, 0x01	; 1
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <strtok_r+0x46>
 5aa:	22 23       	and	r18, r18
 5ac:	c1 f7       	brne	.-16     	; 0x59e <strtok_r+0x2e>
 5ae:	0d 90       	ld	r0, X+
 5b0:	00 20       	and	r0, r0
 5b2:	a1 f7       	brne	.-24     	; 0x59c <strtok_r+0x2c>
 5b4:	d0 01       	movw	r26, r0
 5b6:	fa 01       	movw	r30, r20
 5b8:	a1 93       	st	Z+, r26
 5ba:	b0 83       	st	Z, r27
 5bc:	08 95       	ret

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
